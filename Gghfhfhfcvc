-- Services

local Players = game:GetService("Players")
local ReSt = game:GetService("ReplicatedStorage")
local RS = game:GetService("RunService")
local TS = game:GetService("TweenService")
local CG = game:GetService("CoreGui")

local foldername = "Deaths"
local valid2 = isfolder(foldername)
if not valid2 then
	makefolder(foldername)
end

local FootstepsT = {
	{Volume = 1},
	{PlaybackSpeed = 1},
	{TimePosition = 0},
	{RollOffMaxDistance =100},
	{RollOffMinDistance =5},
}
local PlaySoundT = {
	{Volume = 1},
	{PlaybackSpeed = 1},
	{TimePosition = 0},
	{RollOffMaxDistance =300},
	{RollOffMinDistance =5},
}

-- Variables

local Plr = Players.LocalPlayer
local Char = Plr.Character or Plr.CharacterAdded:Wait()
local Hum = Char:WaitForChild("Humanoid")
local Camera = workspace.CurrentCamera

local StaticRushSpeed = 60

local FindPartOnRayWithIgnoreList = workspace.FindPartOnRayWithIgnoreList
local WorldToViewportPoint = Camera.WorldToViewportPoint

local SelfModules = {
	DefaultConfig = loadstring(game:HttpGet("https://raw.githubusercontent.com/MuhXd/DoorSuff/main/OtherSuff/DoorEntitySpawn%2BDefaultConfig"))(),
	Functions = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Functions.lua"))(),
}
local ModuleScripts = {
	ModuleEvents = require(ReSt.ClientModules.Module_Events),
	MainGame = require(Plr.PlayerGui.MainUI.Initiator.Main_Game),
}

local EntityConnections = {}

local Spawner = {}

-- Misc Functions

function getPlayerRoot()
	return Char:FindFirstChild("HumanoidRootPart") or Char:FindFirstChild("Head") 
end
function GetCollisionPos()
	return Char:FindFirstChild("Collision") or getPlayerRoot()
end
function GetGitSoundID(GithubSnd,SoundName)
	SoundName=tostring(SoundName)
	local url=GithubSnd
	SoundName=tostring(SoundName)
	local url=GithubSnd
	FileName = SoundName
	writefile("customObject_Sound_"..FileName..".mp3", game:HttpGet(url))
	return (getcustomasset or getsynasset)("customObject_Sound_"..FileName..".mp3")
end
function RemoveChildren(Children)
	for i,v in pairs(Children:GetChildren()) do
		v:Remove()
	end

end


function ResetSound(soundD,CustomTable)
	SoundTable={
		{PlaybackSpeed = 1},
	}
	CustomTable=SoundTable

	for i, v in next, CustomTable[1] do
		if i ~= "SoundId" and i ~= "Parent" then
			soundD[i] = v
		end
	end
	return soundD
end
function GetGitSound(GithubSnd,SoundName)
	SoundName=tostring(SoundName)
	local url=GithubSnd
	FileName = SoundName
	writefile("customObject_Sound_"..FileName..".mp3", game:HttpGet(url))

	local sound=Instance.new("Sound")
	sound.SoundId=(getcustomasset or getsynasset)("customObject_Sound_"..FileName..".mp3")
	return sound
end

function dragEntity(entityTable,entityModel, pos, speed)

	local entityConnections = EntityConnections[entityModel]

	if entityConnections.movementNode then
		entityConnections.movementNode:Disconnect()
	end

	entityConnections.movementNode = RS.Stepped:Connect(function(_, step)

		if entityModel.Parent and not entityModel:GetAttribute("NoAI") then
			local rootPos = entityModel.PrimaryPart.Position

			local diff = Vector3.new(pos.X, pos.Y, pos.Z) - rootPos

			if diff.Magnitude > 0.1 then
				if entityTable.Config.MovementDeath[1] then
					if entityTable.Config.MovementDeath[2] == '1' then
						if Hum.MoveDirection ~= Vector3.new(0,0,0) and not Char:GetAttribute("IsDead") then
							Spawner.SendingDie(entityTable,entityModel)
						end
					end 

				end
				task.spawn(entityTable.Debug.OnEntityMoving,Char:GetAttribute("Invincible") or false,Char:GetAttribute("Invincible") or false,(GetCollisionPos().Position - entityModel.PrimaryPart.Position).Magnitude or nil,entityModel)
				entityModel:SetPrimaryPartCFrame(CFrame.new(rootPos + diff.Unit * math.min(step * speed, diff.Magnitude)))
			else
				entityConnections.movementNode:Disconnect()
			end
		end
	end)

	repeat task.wait() until not entityConnections.movementNode.Connected
end

function loadSound(soundData,Name)
	soundId = tostring(soundData[1])
	if soundId:find("https://") then
		sound = GetGitSound(soundData[1],Name)
		local properties = soundData[2]
		for i, v in next, properties do
			if i ~= "SoundId" and i ~= "Parent" then
				sound[i] = v
			end
		end

		sound.Parent = workspace
		return sound
	end

	local sound = Instance.new("Sound")
	local soundId = tostring(soundData[1])
	local properties = soundData[2]

	for i, v in next, properties do
		if i ~= "SoundId" and i ~= "Parent" then
			sound[i] = v
		end
	end

	if 
		soundId:find("rbxasset://") then -- Custom audio
		sound.SoundId = soundId
	else 
		local numberId = soundId:gsub("%D", "")
		sound.SoundId = "rbxassetid://".. numberId
	end

	sound.Parent = workspace

	return sound
end

-- Functions

Spawner.createEntity = function(config)
	for i, v in next, SelfModules.DefaultConfig do
		if config[i] == nil then
			config[i] = v
		end
	end

	config.Speed = StaticRushSpeed / 100 * config.Speed

	-- Model

	local entityModel = LoadCustomInstance(config.Model)

	if typeof(entityModel) == "Instance" and entityModel.ClassName == "Model" then
		entityModel.PrimaryPart = entityModel.PrimaryPart or entityModel:FindFirstChildWhichIsA("BasePart")

		if entityModel.PrimaryPart then
			entityModel.PrimaryPart.Anchored = true

			if config.CustomName then
				entityModel.Name = config.CustomName
			end

			if config.EntitySounds.PlaySound then
				FC=entityModel.PrimaryPart:FindFirstChild("PlaySound")

				soundidGIT= GetGitSoundID(config.EntitySounds.PlaySound[1],"PlaySound"..config.CustomName)
				if FC then
					FC.SoundId = soundidGIT
					PlaySound=FC
					RemoveChildren(PlaySound)
					PlaySound=ResetSound(PlaySound,PlaySoundT)
				else
					PlaySound = loadSound(config.EntitySounds.PlaySound,"PlaySound"..config.CustomName)
					PlaySound.Name = "PlaySound"
					PlaySound=	ResetSound(PlaySound,PlaySoundT)
					PlaySound.Parent = entityModel.PrimaryPart
				end
				properties = config.EntitySounds.PlaySound[2]
				for i, v in next, properties do
					if i ~= "SoundId" and i ~= "Parent" then
						PlaySound[i] = v
					end
				end

			end

		end

	end


	if config.EntitySounds.Footsteps then
		FCA=entityModel.PrimaryPart:FindFirstChild("Footsteps")

		soundidGIT= GetGitSoundID(config.EntitySounds.PlaySound[1],"Footsteps"..config.CustomName)
		if FCA then
			FCA.SoundId = soundidGIT
			Footsteps=FCA
			RemoveChildren(Footsteps)
			Footsteps=	ResetSound(Footsteps,FootstepsT)
		else
			Footsteps = loadSound(config.EntitySounds.PlaySound,"Footsteps"..config.CustomName)
			Footsteps.Name = "Footsteps"
			Footsteps=	ResetSound(Footsteps,FootstepsT)
			Footsteps.Parent = entityModel.PrimaryPart
		end
		properties = config.EntitySounds.Footsteps[2]
		for i, v in next, properties do
			if i ~= "SoundId" and i ~= "Parent" then
				Footsteps[i] = v
			end
		end
	end

	entityModel:SetAttribute("IsCustomEntity", true)
	entityModel:SetAttribute("NoAI", false)

	-- EntityTable

	local entityTable = {
		Model = entityModel,
		Config = config,
		Debug = {
			OnEntitySpawned = function() end,
			OnEntityDespawned = function() end,
			OnEntityStartMoving = function() end,
			OnEntityEnteredRoom = function() end,
			OnLookAtEntity = function() end,
			OnDeath = function() end,
			NothidingKill = function() end,
			OnEntityMoving = function() end
		}
	}

	return entityTable

end


Spawner.runEntity = function(entityTable)
	-- Nodes

	local entityNodes = {}
	if not entityTable.Config.OneRoom then
		for _, room in next, workspace.CurrentRooms:GetChildren() do
			local nodes = room:WaitForChild("Nodes", 1)

			if nodes then
				nodes = nodes:GetChildren()

				table.sort(nodes, function(a, b)
					return a.Name < b.Name
				end)

				for _, node in next, nodes do
					entityNodes[#entityNodes + 1] = node
				end
			end
		end
	else
		room = workspace.CurrentRooms[game.ReplicatedStorage.GameData.LatestRoom.Value]
		local nodes = room:WaitForChild("Nodes", 1)

		if nodes then
			nodes = nodes:GetChildren()

			table.sort(nodes, function(a, b)
				return a.Name < b.Name
			end)

			for _, node in next, nodes do
				entityNodes[#entityNodes + 1] = node
			end
		end
	end
	-- Spawn

	local entityModel = entityTable.Model:Clone()

	local startNodeIndex = entityTable.Config.BackwardsMovement and #entityNodes or 1
	local startNodeOffset = entityTable.Config.BackwardsMovement and -50 or 50

	EntityConnections[entityModel] = {}
	local entityConnections = EntityConnections[entityModel]

	entityModel:SetPrimaryPartCFrame(entityNodes[startNodeIndex].CFrame * CFrame.new(0, 0, startNodeOffset) + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0))
	entityModel.Parent = workspace

	task.spawn(entityTable.Debug.OnEntitySpawned)

	-- Mute entity on spawn

	if CG:FindFirstChild("JumpscareGui") or (Plr.PlayerGui.MainUI.Death.HelpfulDialogue.Visible and not Plr.PlayerGui.MainUI.DeathPanelDead.Visible) then
		warn("on death screen, mute entity")

		for _, v in next, entityModel:GetDescendants() do
			if v.ClassName == "Sound" and v.Playing then
				v:Stop()
			end
		end
	end

	-- Flickering

	if entityTable.Config.FlickerLights[1] then
		ModuleScripts.ModuleEvents.flickerLights(workspace.CurrentRooms[ReSt.GameData.LatestRoom.Value], entityTable.Config.FlickerLights[2])
	end

	-- Movement

	task.wait(entityTable.Config.DelayTime)

	local enteredRooms = {}


	entityConnections.movementTick = RS.Stepped:Connect(function()
		if entityModel.Parent and not entityModel:GetAttribute("NoAI") then
			local entityPos = entityModel.PrimaryPart.Position


			local rootPos = getPlayerRoot().Position
			local floorRay = FindPartOnRayWithIgnoreList(workspace, Ray.new(entityPos, Vector3.new(0, -10, 0)), {entityModel, Char})
			local playerInSight = FindPartOnRayWithIgnoreList(workspace, Ray.new(entityPos, rootPos - entityPos), {entityModel, Char}) == nil

			-- Entered room

			if floorRay ~= nil and floorRay.Name == "Floor" then
				for _, room in next, workspace.CurrentRooms:GetChildren() do
					if floorRay:IsDescendantOf(room) and not table.find(enteredRooms, room) then
						enteredRooms[#enteredRooms + 1] = room
						task.spawn(entityTable.Debug.OnEntityEnteredRoom, room, entityModel)
						-- Break lights

						if entityTable.Config.BreakLights then
							ModuleScripts.ModuleEvents.breakLights(room)
						end

						break
					end
				end
			end

			-- Camera shaking

			local shakeConfig = entityTable.Config.CamShake
			local shakeMag = (getPlayerRoot().Position - entityModel.PrimaryPart.Position).Magnitude

			if shakeConfig[1] and shakeMag <= shakeConfig[3] then
				local shakeRep = {}

				for i, v in next, shakeConfig[2] do
					shakeRep[i] = v
				end
				shakeRep[1] = shakeConfig[2][1] / shakeConfig[3] * (shakeConfig[3] - shakeMag)

				ModuleScripts.MainGame.camShaker.ShakeOnce(ModuleScripts.MainGame.camShaker, table.unpack(shakeRep))
			end

			-- Player in sight

			if not playerInSight then
				-- Look at entity

				local _, onScreen = WorldToViewportPoint(Camera, entityModel.PrimaryPart.Position)

				if onScreen then
					task.spawn(entityTable.Debug.OnLookAtEntity)
					if entityTable.Config.MovementDeath[1] then
						if entityTable.Config.MovementDeath[2] == '2'  and Char:GetAttribute("IsDead") then
							if Hum.MoveDirection ~= Vector3.new(0,0,0) then
								Spawner.SendingDie(entityTable,entityModel)
							end
						end 
					end
					if entityTable.Config.DieOnLook and not Char:GetAttribute("IsDead") then
						Spawner.SendingDie(entityTable,entityModel)
					end
				end

				-- Kill player

				--and not Char:GetAttribute("Hiding")
				DiedChar=Char:GetAttribute("IsDead") or false
				Finding = Char.FindFirstChild(Char, "Crucifix")
				if entityTable.Config.CanKill and not DiedChar  then
					if entityTable.Config.AntiCrucifix and Finding then
						task.spawn(entityTable.Debug.OnDeath)
						Hum.Health = 0
						ReSt.GameStats["Player_".. Plr.Name].Total.DeathCause.Value = "Anti Crucifixs (Anti Cheat)"
						firesignal(ReSt.Bricks.DeathHint.OnClientEvent, {"No Crucifixs (Or Ways of Invincibity) Are aloud With This Entity"})
					end
					local Config = entityTable.Config
					if not Char:GetAttribute("Invincible") and (getPlayerRoot().Position - entityModel.PrimaryPart.Position).Magnitude <= entityTable.Config.KillRange then
						if Config.NoHiding and Char:GetAttribute("Hiding") or not ModuleScripts.MainGame.crouching and config.NoDieOnCrouching or not Char:GetAttribute("Hiding") and not config.NoHiding then
							Spawner.SendingDie(entityTable,entityModel)
						end
					end
				end
			end
		end
	end)
	Spawner.SendingDie = function(entityTable,entityModel)
		task.spawn(function()
			Char:SetAttribute("IsDead", true)
			-- Mute entity

			warn("mute entity")

			for _, v in next, entityModel:GetDescendants() do
				if v.ClassName == "Sound" and v.Playing then
					v:Stop()
				end
			end

			-- Jumpscare

			if entityTable.Config.Jumpscare[1] then
				Spawner.runJumpscare(entityTable.Config.Jumpscare[2],entityTable.Config)
			end

			-- Death handling

			task.spawn(entityTable.Debug.OnDeath)
			Hum.Health = 0
			ReSt.GameStats["Player_".. Plr.Name].Total.DeathCause.Value = entityModel.Name
			if entityTable.Config.DiffrentMessages then
				EntitiesDeaths = tostring(entityTable.Config.CustomName)
				filePath = foldername.. "/".. EntitiesDeaths
				DeathfileName = EntitiesDeaths..".saveF"
				valid = isfile(filePath..".saveF")
				if not valid then
					writefile(filePath..".saveF", "Deaths:1")
					local read = readfile(filePath..".saveF")  
					local read2 = tostring(read)
					local read2 = string.split(read2,":")
					deaths=read2[2]
					Deaths = entityTable.Config.CustomDialog[deaths]
				else
					Reached=false
					pcall(function()
						for i,v in pairs(entityTable.Config.CustomDialog) do
							Max = i
						end
						local read = readfile(filePath..".saveF")  
						local read2 = tostring(read)
						local read2 = string.split(read2,":")
						Read3=read2[2]
						Read3=tonumber(Read3)
						Read3=Read3+1
						deaths=Read3
						Read3=tostring(Read3)
						writefile(filePath..".saveF", "Deaths:"..Read3)
						if deaths > Max then
							Deaths = entityTable.Config.CustomDialog[Max]
						else
							Deaths = entityTable.Config.CustomDialog[deaths]
						end
						Reached=true
					end)
					if Reached == false then
						writefile(filePath..".saveF", "Deaths:1")
						Deaths = entityTable.Config.CustomDialog[1]
					end
				end
			else
				None = true
				pcall(function()
					Deaths = entityTable.Config.CustomDialog[1]
					None = false


				end)
				if None == true then
					Deaths = entityTable.Config.CustomDialog
				else
					Deaths = entityTable.Config.CustomDialog[1]
				end
			end
			if #entityTable.Config.CustomDialog > 0 then
				firesignal(ReSt.Bricks.DeathHint.OnClientEvent, Deaths)
			end


			-- Unmute entity

			task.spawn(function()
				repeat task.wait() until Plr.PlayerGui.MainUI.DeathPanelDead.Visible

				warn("unmute entity:", entityModel)

				for _, v in next, entityModel:GetDescendants() do
					if v.ClassName == "Sound" then
						local oldVolume = v.Volume

						v.Volume = 0
						v:Play()
						TS:Create(v, TweenInfo.new(2), {Volume = oldVolume}):Play()
					end
				end

			end)
		end)
	end

task.spawn(entityTable.Debug.OnEntityStartMoving)

-- Cycles

	local cyclesConfig = entityTable.Config.Cycles

if entityTable.Config.BackwardsMovement then
	local inverseNodes = {}

	for nodeIdx = #entityNodes, 1, -1 do
		inverseNodes[#inverseNodes + 1] = entityNodes[nodeIdx]
	end

	entityNodes = inverseNodes
end

for cycle = 1, math.max(math.random(cyclesConfig.Min, cyclesConfig.Max), 1) do
	for nodeIdx = 1, #entityNodes, 1 do
		dragEntity(entityTable,entityModel, entityNodes[nodeIdx].Position + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0), entityTable.Config.Speed)
	end
	if cyclesConfig.Max > 1 then
		for nodeIdx = #entityNodes, 1, -1 do
			dragEntity(entityTable,entityModel, entityNodes[nodeIdx].Position + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0), entityTable.Config.Speed)
		end
	end

	-- Rebound finished

	task.spawn(entityTable.Debug.OnEntityFinishedRebound)

	if cycle < cyclesConfig.Max then
		task.wait(cyclesConfig.WaitTime)
	end
end
-- Destroy

if not entityModel:GetAttribute("NoAI") then
	for _, v in next, entityConnections do
		v:Disconnect()
	end

	entityModel:Destroy()
	task.spawn(entityTable.Debug.OnEntityDespawned)
end

end


Spawner.runJumpscare = function(config,Fullconfig)
	-- Variables

	local image1 = LoadCustomAsset(config.Image1)
	local image2 = LoadCustomAsset(config.Image2)
	local sound1, sound2 = nil, nil

	if config.Sound1 then
		sound1 = loadSound(config.Sound1,"Sound1"..Fullconfig.CustomName)
	end

	if config.Sound2 then
		sound2 = loadSound(config.Sound2,"Sound2"..Fullconfig.CustomName)
	end
	if not config.Type then
		Type="1"
	else
		Type = tostring(config.Type)
	end

	-- UI Construction

	local JumpscareGui = Instance.new("ScreenGui")
	local Background = Instance.new("Frame")
	local Face = Instance.new("ImageLabel")

	JumpscareGui.Name = "JumpscareGui"
	JumpscareGui.IgnoreGuiInset = true
	JumpscareGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	Background.Name = "Background"
	Background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Background.BorderSizePixel = 0
	Background.Size = UDim2.new(1, 0, 1, 0)
	Background.ZIndex = 999

	Face.Name = "Face"
	Face.AnchorPoint = Vector2.new(0.5, 0.5)
	Face.BackgroundTransparency = 1
	Face.Position = UDim2.new(0.5, 0, 0.5, 0)
	Face.ResampleMode = Enum.ResamplerMode.Pixelated
	Face.Size = UDim2.new(0, 150, 0, 150)
	Face.Image = image1

	Face.Parent = Background
	Background.Parent = JumpscareGui
	JumpscareGui.Parent = CG


	-- Tease
	local JumpscareContrast = Instance.new("ColorCorrectionEffect",game.Lighting)
	local teaseConfig = config.Tease
	local absHeight = JumpscareGui.AbsoluteSize.Y
	local minTeaseSize = absHeight / 5
	local maxTeaseSize = absHeight / 2.5
	local Full = Instance.new("ImageLabel")
	Full.Name = "Full"
	Full.BackgroundTransparency = 1
	Full.Position = UDim2.new(0.5, 0, 0.5, 0)
	Full.Size = UDim2.new(1.12197304, 0, 1.44743586, 0)
	Full.ImageTransparency = 1
	Full.Parent = Background
	----------------------------------------------------------------------
--[[    Gui's Effects
]]

	if Type == "pop" or Type ==  "2" then
		JumpscareEnd=Face
		Background.Transparency = 1
		JumpscareEnd.Image = image2
		game.TweenService:Create(JumpscareEnd,TweenInfo.new(0.5),{Size = Full.Size,Position = Full.Position,Rotation = math.random(-20,20)}):Play()
		game.TweenService:Create(JumpscareContrast,TweenInfo.new(10),{Brightness = 0,Contrast = 0,Saturation = 0,TintColor = Color3.fromRGB(255, 255, 255)}):Play()
		task.wait(0.75)
		JumpscareGui:Destroy()
		Full:Destroy()
		sound2:Play()
		return "Effect Finished"
	elseif Type == "endlessdoorsrebound" or Type ==  "3"  or Type == 'Rebound' then
		JumpscareEnd=Face
		Full.Size = UDim2.new(0.8, 0, 0.8, 0)
		Background.Transparency = 1
		JumpscareEnd.Image = image1
		Full.Position = UDim2.new(0.5, 0, 0.5, 0)
		Full.Size = UDim2.new(0.03, 0, 0.05, 0)
		game.TweenService:Create(JumpscareEnd,TweenInfo.new(0),{Size = Full.Size,Position = Full.Position}):Play()
		task.wait(0.5)
		JumpscareEnd.Image = image2
		Full.Position = UDim2.new(0.5, 0, 0.5, 0)
		Full.Size = UDim2.new(0.8, 0, 0.8, 0)
		game.TweenService:Create(JumpscareEnd,TweenInfo.new(0.5),{Size = Full.Size,Position = Full.Position}):Play()
		game.TweenService:Create(JumpscareContrast,TweenInfo.new(10),{Brightness = 0,Contrast = 0,Saturation = 0,TintColor = Color3.fromRGB(255, 255, 255)}):Play()
		task.wait(0.75)
		JumpscareGui:Destroy()
		Full:Destroy()
		sound2:Play()
		return "Effect Finished"
	else
		if teaseConfig[1] then
			local teaseAmount = math.random(teaseConfig.Min, teaseConfig.Max)

			sound1:Play()

			for _ = teaseConfig.Min, teaseAmount do
				task.wait(math.random(100, 200) / 100)

				local growFactor = (maxTeaseSize - minTeaseSize) / teaseAmount
				Face.Size = UDim2.new(0, Face.AbsoluteSize.X + growFactor, 0, Face.AbsoluteSize.Y + growFactor)
			end

			task.wait(math.random(100, 200) / 100)
		end
	end

	-- Flashing

	if config.Flashing[1] then
		task.spawn(function()
			while JumpscareGui.Parent do
				Background.BackgroundColor3 = config.Flashing[2]
				task.wait(math.random(25, 100) / 1000)
				Background.BackgroundColor3 = Color3.new(0, 0, 0)
				task.wait(math.random(25, 100) / 1000)
			end
		end)
	end

	-- Shaking

	if config.Shake then
		task.spawn(function()
			local origin = Face.Position

			while JumpscareGui.Parent do
				Face.Position = origin + UDim2.new(0, math.random(-10, 10), 0, math.random(-10, 10))
				Face.Rotation = math.random(-5, 5)

				task.wait()
			end
		end)
	end

	-- Jumpscare
	if Type == "Normal" or Type == "1" then
		Face.Image = image2
		Face.Size = UDim2.new(0, maxTeaseSize, 0, maxTeaseSize)
		sound2:Play()

		TS:Create(Face, TweenInfo.new(0.75), {Size = UDim2.new(0, absHeight * 3, 0,  absHeight * 3), ImageTransparency = 0.5}):Play()
		task.wait(0.75)
		JumpscareGui:Destroy()

		if sound1 then
			sound1:Destroy()
		end

		if sound2 then
			sound2:Destroy()
		end
	else
		Face.Image = image2
		Face.Size = UDim2.new(0, maxTeaseSize, 0, maxTeaseSize)
		sound2:Play()

		TS:Create(Face, TweenInfo.new(0.75), {Size = UDim2.new(0, absHeight * 3, 0,  absHeight * 3), ImageTransparency = 0.5}):Play()
		task.wait(0.75)
		JumpscareGui:Destroy()

		if sound1 then
			sound1:Destroy()
		end

		if sound2 then
			sound2:Destroy()
		end
	end
end

-- Scripts

task.spawn(function()
	while true do
		local inSession = false

		for _, v in next, workspace:GetChildren() do
			if v.Name == "RushMoving" or v.Name == "AmbushMoving" or v:GetAttribute("IsCustomEntity") then
				inSession = true
				break
			end
		end

		ReSt.GameData.ChaseInSession.Value = inSession
		task.wait(0.5)
	end

end)

-- Returns the Spawner







return Spawner




